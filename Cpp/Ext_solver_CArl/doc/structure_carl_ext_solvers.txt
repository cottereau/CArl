--- Elements needed to build external software CArl / FETI :

 -> Executables:
 *  Setup :
    > To be done before launching the code, probably by hand
    - CArl_build_intersections : find and build the intersection meshes
	  > Pratically ready
    - CArl_assemble_coupling   : assemble the coupling matrices C_i
      > Use first part of the current "CArl_libmesh_xyz" code
	  > Also create the mediator coupling matrix, C_M
	  > Optimize memory consumption
	- "External code setup"    : setup files / system to run external code
	  > More like a step than an executable
	  > (libMesh) Example : assemble homogeneous linear system, assemble heterogeneous 
	                        anisotropic system
	    * CArl_libmesh_lin_homogeneous
		* CArl_libmesh_lin_aniso
	  > Includes preparing base PBS files for external software
	  > Includes exporting the force vector for the rigid body modes, F_2, and the modes 
	    themselves, RB

 *  Automated CArl / FETI :
    > These guys are automated, and launch each other
	- CArl_FETI_setup_init
	  > Read F_2, C_2 and RB : build phi(0)
	  > EXPORT : phi(0)
	  > PBS : Prepare initial PBS call chain
	    * [PBS A,i] Call external solver to solve K_i * u_0,i = F_i
	    * [PBS B,i] After ok with [A,i], multiply u_0,i by C_i^T (call 'CArl_coupl_mult')
		* [PBS C,i] After ok with [B,i], call ext. sol. to solve K_i * x_0,i = C_i^T*u_0,i
		* [PBS D]   After ok with [C,1] and [C,2], call 'CArl_FETI_setup_finish'

	- CArl_FETI_setup_finish
	  > Read C_i, C_M, RB, u_0,i, x_0,i
	  > Set M_PC = ( C_M )^-1 or M_PC = ( diag(C_M) )^-1
	  >
	  > Calculate :       r(0) = ( C_1 * u_0,1 - C_2 * u_0,2 ) - C_1 * x_0,1 - C_2 * x_0,2
	  >             RB_corr(0) = R_2 * R_proj * r(0)
	  >                   z(0) = Pi_2 * M_PC * Pi_2 * r(0)
	  >                 rho(0) = r(0) . z(0)
	  >                   p(0) = z(0)
	  >
	  > EXPORT : [single ] RB_corr(0), r(0), z(0), C_1^T * p(0), C_2^T * p(0)
	  >          [several] p(0), rho(0)
	  > PBS : Lauch first iteration PBS chain, with k = 0 :
	    * [PBS E_0,i] Call external solver to solve K_i * y(0)_i = C_i^T * p(0)
		* [PBS F_0]   After ok with [E_0,1] and [E_0,2], call 'CArl_FETI_iterate'

	- CArl_FETI_iterate
	  > Read C_i, C_M, RB, y(k),i, r(k), z(k), RB_corr(k), rho(0..k), p(0..k), q(0..k-1)
	  >
	  > Calculate :     q(k)   = C_1 * y(k)_1 + C_2 * y(k)_2
	  >             theta(k)   = p(k) . q(k)
	  >             gamma(k)   = rho(k) / alpha(k)
	  >               phi(k+1) = phi(k) + gamma(k) * p(k)
	  >                 r(k+1) = r(k) - gamma(k) * q(k)
	  >                 z(k+1) = i_2 * M_PC * Pi_2 * r(k+1)
	  >               rho(k+1) = r(k+1) . z(k+1)
	  >           RB_corr(k+1) = R_2 * R_proj * r(k+1)
	  > ConvergenceCheck(rho(k+1), rho(0), RB_corr(k+1), RB_corr(k))
	  > if(NOT CONVERGED) :
	  >>   for j=0...k: beta(j)   = z(k+1) . q(j) / theta(j)
	  >>                   p(k+1) = z(k+1) - sum_j=0...k ( beta(j) * p(j) )
	  >>
	  >>   EXPORT : [single ] RB_corr(k+1), r(k+1), z(k+1),  phi(k+1), 
	  >>                      C_1^T * p(k+1), C_2^T * p(k+1)
	  >>            [several] p(k+1), rho(k+1), q(k), theta(k)
	  >>
	  >>   PBS :  Lauch next iteration iteration PBS chain : 
	  >>   * [PBS E_k+1,i] Call external solver to solve K_i * y(k+1)_i = C_i^T * p(0)
	  >>   * [PBS F_k+1]   After ok with [E_k+1,1] and [E_k+1,2], call 'CArl_FETI_iterate'
	  >>
	  > else if (CONVERGED) :
	  >>
	  >>   EXPORT : RB_corr(k+1), C_1^T * phi(k+1), C_2^T * phi(k+1), rho(k+1)
	  >>   PBS :  Launch finalization PBS chain
	  >>   * [PBS G,i] Call external solver to solve K_i * CouplCorr_i = C_i^T * phi(k+1)
	  >>   * [PBS H]   After ok with [PBS G,1] and [PBS G,2], call 'CArl_FETI_set_sol'
	  >>
	  > else if (DIVERGED) :
	  >>
	  >>   EXPORT : [single ] RB_corr(k+1), r(k+1), z(k+1),  phi(k+1), 
	  >>                      C_1^T * p(k+1), C_2^T * p(k+1)
	  >>            [several] p(k+1), rho(k+1), q(k), theta(k)
	  >>   STOP!!!

	- CArl_FETI_set_sol
	  > Read u_0,1, u_0,2, CouplCorr_1, CouplCorr_2, RB_corr
	  >
	  > Calculate : u_1 = u_0,1 - CouplCorr_1
	  >             u_2 = u_0,2 + CouplCorr_2 + RB_corr
	  >
	  > EXPORT : u_1, u_2
	  >
	  > STOP!!!

 *  Post-treatment & tools
    - "External code post-treatment" : process u_1, u_2 to be applied on the meshes
	  > Why external? Future-proofing (coupling using something other than u, with adapted 
	    coupling operators)
	  > (libMesh) Example : calculate stress and save a Paraview mesh
	    * CArl_libmesh_calculate_stress
	- Tool: CArl_coupl_mult
	  > Multiply vec_in by coupling matrix. Stupid, but needed ...
	- Tool: Convert_matlab_vec_to_external_vec, Convert_external_vec_to_matlab_vec
	  > Convert the vectors for compatibility between CArl / MATLAB and the 
	    external solvers
	  > To be built by the user and inserted respectivelly before and after each 
	    external solver call 
